Custom Alert Endpoint
---------------------

Alert endpoints are lua script executed whenever an alert event occurs. An example
of alert endpoint is the email export endpoint, which sends email with alert information.

Users can define a custom alert endpoint to be called on alert events. The endpoint
could trigger, for example, an external bash script with custom logic.

The custom alert endpoint can be enabled as follows:

  1. Run `cp /usr/share/ntopng/scripts/lua/modules/alert_endpoints/{sample.lua,custom.lua}`
  2. Enable "Alerts to Third-Party Endpoints" from the "Alert Endpoints" settings
  3. Run `redis-cli set ntopng.prefs.alerts.custom_notifications_enabled 1`
  4. Restart ntopng

The file `/usr/share/ntopng/scripts/lua/modules/alert_endpoints/custom.lua` can then be
modified with custom logic.

Custom Alert Generation
-----------------------

Ntopng periodically checks the status of its internal elements and determines if an
alert should be generated. The checks are performed into lua scripts, called
"alert check modules".
The alert check modules are located under `scripts/callbacks/interface/alerts/{alarmable}` .
For example, hosts alert check modules are located under `scripts/callbacks/interface/alerts/host`.

ntopng supports the following alarmable:

  - hosts
  - networks
  - interfaces

The alert check modules are called by default every minute, 5 minutes, hour and day, although
a module can limit its execution to a certain granularity.

Here is an example of a check module:

```
local alerts_api = require("alerts_api")
local alert_consts = require("alert_consts")

local check_module = {
  key = "active",
  check_function = alerts_api.threshold_check_function,
  local_only = true,

  gui = {
    i18n_title = "alerts_thresholds_config.activity_time",
    i18n_description = "alerts_thresholds_config.alert_active_description",
    i18n_field_unit = alert_consts.field_units.seconds,
    input_builder = alerts_api.threshold_cross_input_builder,
  }
}

function check_module.get_threshold_value(granularity, info)
  return alerts_api.host_delta_val(check_module.key, granularity, info["total_activity_time"])
end

return check_module
```

and here is a description of the module fields:

  - `key` (mandatory): a key which identifies the check module
  - `check_function` (mandatory): a function which is responsible to check the alarmable state and
    trigger/release the alerts. It takes a `params` parameter with at least the following fields:
      - granularity: the script granularity
      - alert_entity: an entity_info describing the entity (e.g. it contains the host IP address and vlan)
      - entity_info: contains entity specific data (e.g. on hosts, it is the output of `Host:lua()`)
      - alert_config: the alert configuration. This is automatically extracted via the `key`.
      - check_module: a reference to the check module
    See below for a list of built-in check functions.
  - `gui`: information on how to draw the alert configuration into the gui. See below for more details.
  - `local_only`: if true, only call the `check_function` on local hosts
  - `granularity`: if specified, contains a list of granularities for which the `check_function` should be called

## Triggering alerts

Into the `check_function`, the check module should check the alarmable entity state (through the `entity_info`)
and:

  - call `alerts_api.trigger(entity_info, type_info)` whenever the entity state is alerted
  - call `alerts_api.release(entity_info, type_info)` whenever the entity state is not alerted

Alerts state is kept internally so multiple trigger/releases of the same alert have no effect.
The `type_info` is specific of the alert_type and should be built using one of the "type_info building functions"
available into `alerts_api.lua`, for example `alerts_api.thresholdCrossType`.

ntopng already provides some check functions for common needs:

  - `alerts_api.threshold_check_function`: can check thresholds and trigger threshold cross alerts
  - `alerts_api.anomaly_check_function`: checks anomaly status, set by the C core

## Alert configuration

An alert check module can define a `gui` entry to specify how its configuration
should be predented to the user into the ntopng gui. The gui element will be show
under the alert settings of the alarmable, into one or multiple tabs based on its
`granularity`. The `gui` entry contains the following parameters:

  - `i18n_title` (mandatory): a localization string for the title of the element
  - `i18n_description` (mandatory): a localization string for the description of the element
  - `input_builder` (mandatory): a function which is responsible for building the HTML code
    for the element

Additional parameters can be specified based on the input_builder function. Here is
a list of built-in input_builder functions:

  - `alerts_api.threshold_cross_input_builder`: contains an input field with an operator
    and a unit. Suitable to speficy thresholds like "bytes > 512". Here is a list of additional
    supported parameters:

    - `field_max`: max value for the input field
    - `field_min`: min value for the input field
    - `field_step`: step value for the input field
    - `i18n_field_unit`: localization string for the unit of the field

  - `alerts_api.checkbox_input_builder`: a simple checkbox

## Built-in Alerts

Alert types are defined into `alert_consts.alert_types` inside
`scripts/lua/modules/alert_consts.lua`. In order to add new alert types,
the alert definition must be inserted into `alert_consts.alert_types`.
The new alert type must have a unique `alert_id` >= 0, a title and description.

Moreover, a new "type_info building function" should be added to the `alerts_api.lua` to describe
the alert type.
